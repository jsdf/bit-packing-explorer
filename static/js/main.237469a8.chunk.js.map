{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["React","require","Intro","Details","summary","name","href","examples","title","description","style","display","width","height","backgroundColor","value","bitfields","label","fieldSize","src","dec2bin","dec","toString","dec2hex","toUpperCase","useLocalStorage","keySuffix","initialValue","key","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","MAX32_BIT_VALUE","Math","pow","Input","props","onClick","e","currentTarget","select","size","clamp","val","min","max","shiftLeft","shift","Error","ErrorBoundary","state","errorInfo","this","setState","clear","whiteSpace","componentStack","children","Component","Bitfield","setBitfields","dataValue","setDataValue","i","maxFieldValue","subsequentsSize","slice","map","reduce","acc","v","fieldValue","otherValue","bitwiseAnd","floor","shiftRight","setFieldValueDec","newFieldValue","isNaN","flex","border","padding","fontSize","maxWidth","margin","type","placeholder","onChange","s","next","parseInt","splice","aria-label","textAlign","fontFamily","open","setOpen","marginBottom","preventDefault","cursor","stopPropagation","Explorer","param","URL","location","searchParams","get","url","set","history","replaceState","useQueryParam","exampleKey","setExampleKey","newBitfieldSize","setNewBitfieldSize","setDataValueSafe","newValue","currentExample","find","useEffect","marginTop","concat","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.237469a8.chunk.js","sourcesContent":["const React = require('react');\n\nfunction Intro() {\n  return (\n    <>\n      <Details summary={<b>what is bit packing?</b>} name=\"what is bit packing\">\n        <p>\n          Bit packing involves storing multiple values (called{' '}\n          <a href=\"https://en.wikipedia.org/wiki/Bit_field\">bit fields</a>) in\n          as few bits as possible, 'packed' into a contiguous binary value. For\n          example, storing a pixel's color and transparency in 32 bits using 8\n          bits for the red, green, blue and alpha channels.\n        </p>\n        <p>\n          Bit packing has various usecases, such as to save memory, or to make\n          the code run faster by packing pieces of data into a single value that\n          the system's hardware can deal with natively (for example, a 32-bit\n          integer on a system with a 32-bit{' '}\n          <a href=\"https://en.wikipedia.org/wiki/Word_(computer_architecture)\">\n            word size\n          </a>\n          ). See also:{' '}\n          <a href=\"https://en.wikipedia.org/wiki/Bit_field\">bit fields</a>,{' '}\n          <a href=\"https://en.wikipedia.org/wiki/Bit_manipulation\">\n            bit manipulation\n          </a>\n          , <a href=\"https://en.wikipedia.org/wiki/Binary_file\">binary files</a>\n          ,{' '}\n          <a href=\"https://www.kinematicsoup.com/news/2016/9/6/data-compression-bit-packing-101\">\n            Data Compression: Bit-Packing 101\n          </a>\n        </p>\n      </Details>\n\n      <Details\n        summary={<b>how to use this tool</b>}\n        name=\"how to use this tool\"\n      >\n        <p>\n          Select an example from the dropdown, and try changing the 'value to\n          unpack' (in as decimal, binary or hexadecimal form), and see how it\n          affects the unpacked bit field values. Or do the reverse: edit the\n          field values (dec/bin/hex) and see how it affects the packed value.\n        </p>\n        <p>\n          Then you can create your own format. Select the 'custom' example, then\n          create bitfields by entering the size (in bits) of the bitfield you\n          want to create and clicking 'add', and enter a value to interpret\n          using your defined fields.\n        </p>\n      </Details>\n    </>\n  );\n}\n\nconst examples = [\n  {\n    title:\n      'RGBA 8/8/8/8 pixel format: 32-bit color with alpha (purple, 50% opacity)',\n    description: (\n      <p>\n        A single color pixel value from a bitmap image, with 8 bits for each\n        color channel and 8 bits for alpha, allowing for 16,777,216 distinct\n        colors with 256 levels of transparency. This format is used in many\n        pieces of software and games. For example, this format is used by the\n        HTML Canvas API. The data value shown is 'rebeccapurple',{' '}\n        <span\n          style={{\n            display: 'inline-block',\n            width: 10,\n            height: 10,\n            backgroundColor: 'rebeccapurple',\n          }}\n        ></span>{' '}\n        #663399, at 50% opacity. See also:{' '}\n        <a href=\"https://www.fileformat.info/mirror/egff/ch09_02.htm\">\n          Pixel Packing\n        </a>\n      </p>\n    ),\n    value: 1714657663,\n    bitfields: [\n      {label: 'Red', fieldSize: 8},\n      {label: 'Green', fieldSize: 8},\n      {label: 'Blue', fieldSize: 8},\n      {label: 'Alpha', fieldSize: 8},\n    ],\n  },\n\n  {\n    title: 'Nintendo 64 RGBA 5/5/5/1 pixel format (blue, opaque)',\n    description: (\n      <p>\n        A single color pixel value from a bitmap image, with 5 bits for each\n        color channel and 1 bit for alpha (eg. completely transparent or\n        opaque). This format is used for the framebuffer image on the Nintendo\n        64. The data value shown is 'steelblue',{' '}\n        <span\n          style={{\n            display: 'inline-block',\n            width: 10,\n            height: 10,\n            backgroundColor: 'steelblue',\n          }}\n        ></span>{' '}\n        #4682B4, at full opacity. See also:{' '}\n        <a href=\"https://www.fileformat.info/mirror/egff/ch09_02.htm\">\n          Pixel Packing\n        </a>\n        ,{' '}\n        <a href=\"https://n64squid.com/homebrew/n64-sdk/textures/image-formats/\">\n          Colour and image format types for the N64\n        </a>\n      </p>\n    ),\n    value: 214061,\n    bitfields: [\n      {label: 'Red', fieldSize: 5},\n      {label: 'Green', fieldSize: 5},\n      {label: 'Blue', fieldSize: 5},\n      {label: 'Alpha', fieldSize: 1},\n    ],\n  },\n  {\n    title: 'DOOM Q16.16 fixed-point decimal number (π, 3.141592653589793)',\n    value: 205887,\n    description: (\n      <span>\n        <p>\n          This format stores a decimal number using 16 bits for the integer part\n          and 16 bits for the fractional part (the stuff after the decimal\n          point). The example given is π, 3.141592653589793. To convert this\n          value back to a floating-point number, divide the fractional part by\n          the maximum fractional value (for 16 bits: 65535) and add it to the\n          integer part.\n        </p>\n        <p>\n          {' '}\n          This number format was{' '}\n          <a href=\"https://doomwiki.org/wiki/Fixed_point\">used by DOOM</a> to\n          take advantage of the fact that a fixed-point number representation\n          can be operated on using integer CPU instructions, which at the time\n          were considerably faster than floating-point instructions. See also:{' '}\n          <a href=\"https://en.wikipedia.org/wiki/Fixed-point_arithmetic\">\n            Fixed-point arithmetic\n          </a>\n        </p>\n      </span>\n    ),\n    bitfields: [\n      {label: 'Integer part', fieldSize: 16},\n      {label: 'Fractional part', fieldSize: 16},\n    ],\n  },\n  {\n    title: 'MS-DOS 32-bit Date & Time (2020-4-29 11:48:32AM)',\n    description: (\n      <p>\n        This is the original format in which MS-DOS stored file creation time\n        and date, as well as the system clock format for IBM PC BIOSes. It has a\n        resolution of 2 seconds; the 5 bits allocated to storing seconds is\n        insufficient to store 60 distinct values, so it stores seconds divided\n        by 2. As it stores the year as an offset from 1980 with a range of 0\n        &ndash; 127, values in this format will overflow in the year 2107. See\n        also:{' '}\n        <a href=\"https://docs.microsoft.com/en-us/cpp/c-runtime-library/32-bit-windows-time-date-formats\">\n          32-Bit Windows Time/Date Formats\n        </a>\n      </p>\n    ),\n    value: 1350327824,\n    bitfields: [\n      {label: 'Year (since 1980)', fieldSize: 7},\n      {label: 'Month (0 - 11)', fieldSize: 4},\n      {label: 'Day of Month (0 - 30)', fieldSize: 5},\n      {label: 'Hour (0 - 23)', fieldSize: 5},\n      {label: 'Minute (0 - 59)', fieldSize: 6},\n      {label: 'Second / 2 (0 - 29)', fieldSize: 5},\n    ],\n  },\n  {\n    title: 'MIDI Message (Note On C3 at 50% velocity)',\n    value: 9452607,\n    description: (\n      <span>\n        <p>\n          In the MIDI protocol, notes are played using{' '}\n          <a href=\"https://www.songstuff.com/recording/article/midi_message_format/\">\n            MIDI Messages\n          </a>{' '}\n          like 'Note On' and 'Note Off'. MIDI commands consist of up to 3 bytes:\n          a 'status byte' followed by up to 2 'data bytes'. Status bytes begin\n          with 1 and data bytes begin with 0. A status byte then contains a 3\n          bit 'message' value, basically a command, like 'note on' or 'program\n          change', and then the MIDI channel number to send the command to (0\n          &ndash; 15).\n        </p>\n        <img\n          width={600}\n          src=\"https://cdn.glitch.com/3d521f4c-3f74-44c5-b7b8-ef308d517c51%2FScreen%20Shot%202020-04-30%20at%209.08.50%20PM.png?v=1588295353615\"\n        />\n        <p>\n          In the example we have a 'Note On' message on channel 0, playing note\n          number 60 (C3, or 'middle C') with a velocity of 63 (50% of maximum).\n        </p>\n      </span>\n    ),\n    bitfields: [\n      {fieldSize: 1, label: 'is status byte'},\n      {fieldSize: 3, label: 'status message'},\n      {fieldSize: 4, label: 'channel'},\n      {fieldSize: 1, label: 'is status byte'},\n      {fieldSize: 7, label: 'data 1 (note number)'},\n      {fieldSize: 1, label: 'is status byte'},\n      {fieldSize: 7, label: 'data 2 (velocity)'},\n    ],\n  },\n  {\n    title: 'custom (make your own!)',\n    value: 0,\n    bitfields: [],\n  },\n];\n\nfunction sum(array) {\n  return array.reduce((acc, v) => acc + v, 0);\n}\nfunction dec2bin(dec) {\n  return dec.toString(2);\n}\nfunction dec2hex(dec) {\n  return dec.toString(16).toUpperCase();\n}\n\nconst localStorageVersion = '5::::'; // change this to invalidate localStorage\n\n// hook to store app state in localStorage\nfunction useLocalStorage(keySuffix, initialValue) {\n  const key = localStorageVersion + keySuffix;\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nfunction useQueryParam(param, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      // Get from url by param\n      const item = new URL(window.location.href).searchParams.get(param);\n      // Parse stored json or if none return initialValue\n      return item != null ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to query params.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        typeof value === 'function' ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n\n      const url = new URL(window.location.href);\n      url.searchParams.set(param, JSON.stringify(valueToStore));\n      window.history.replaceState(null, null, url.toString());\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nconst MAX32_BIT_VALUE = Math.pow(2, 32) - 1;\n\nfunction Input(props) {\n  return (\n    <input onClick={(e) => e.currentTarget.select()} size={10} {...props} />\n  );\n}\n\nfunction clamp(val, min, max) {\n  return Math.min(max, Math.max(min, val));\n}\n\n// like << but won't overflow at 32 bits\nfunction shiftLeft(value, shift) {\n  if (value < 0) {\n    throw new Error('unsafe input to shiftLeft');\n  }\n  return value * Math.pow(2, shift);\n}\n\n// like & but will throw if information would be lost by operand > 32 bits\nfunction bitwiseAnd(value, otherValue) {\n  if (value > MAX32_BIT_VALUE || otherValue > MAX32_BIT_VALUE) {\n    throw new Error('unsafe input to bitwiseAnd');\n  }\n  return value & otherValue;\n}\n\n// like >> but won't overflow at 32 bits\nfunction shiftRight(value, shift) {\n  if (value < 0) {\n    throw new Error('unsafe input to shiftRight');\n  }\n  return Math.floor(value / Math.pow(2, shift));\n}\n\n// standard react error boundary component\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {error: null, errorInfo: null};\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    });\n    console.log({error, errorInfo});\n    // might be bad data in localstorage now\n    localStorage.clear();\n  }\n\n  render() {\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>Something went wrong.</h2>\n          <details style={{whiteSpace: 'pre-wrap'}}>\n            {this.state.error && this.state.error.toString()}\n            <br />\n            {this.state.errorInfo.componentStack}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n\nfunction Bitfield({\n  bitfields,\n  setBitfields,\n  dataValue,\n  setDataValue,\n  fieldSize,\n  label,\n  i,\n}) {\n  const maxFieldValue = Math.pow(2, fieldSize) - 1;\n  const subsequentsSize = sum(\n    bitfields.slice(i + 1).map(({fieldSize}) => fieldSize)\n  );\n\n  const fieldValue = bitwiseAnd(\n    shiftRight(dataValue, subsequentsSize),\n    maxFieldValue\n  );\n\n  function setFieldValueDec(newFieldValue) {\n    setDataValue(\n      dataValue -\n        shiftLeft(fieldValue, subsequentsSize) +\n        shiftLeft(\n          clamp(isNaN(newFieldValue) ? 0 : newFieldValue, 0, maxFieldValue),\n          subsequentsSize\n        )\n    );\n  }\n\n  return (\n    <div\n      style={{\n        flex: 1,\n        border: 'solid 1px black',\n        padding: 4,\n        fontSize: 12,\n        maxWidth: 400,\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n        }}\n      >\n        <div style={{flex: 1, margin: '2px 0'}}>\n          <div>\n            <label>\n              <Input\n                type=\"text\"\n                value={label}\n                placeholder=\"field name\"\n                style={{margin: '2px 0'}}\n                size={20}\n                onChange={(e) =>\n                  setBitfields((s) => {\n                    const next = s.slice();\n                    next[i] = {...next[i], label: e.currentTarget.value};\n                    return next;\n                  })\n                }\n              />{' '}\n              <br />\n              size:{' '}\n              <Input\n                value={fieldSize}\n                onChange={(e) =>\n                  setBitfields((s) => {\n                    const next = s.slice();\n                    next[i] = {\n                      ...next[i],\n                      fieldSize: clamp(parseInt(e.currentTarget.value), 0, 32),\n                    };\n                    return next;\n                  })\n                }\n              />\n            </label>{' '}\n            <br />\n            bits: {fieldSize + subsequentsSize - 1}\n            {fieldSize > 1 ? <span> &ndash; {subsequentsSize}</span> : ''}\n          </div>\n        </div>\n        <button\n          style={{height: '2em'}}\n          onClick={() =>\n            setBitfields((s) => {\n              const next = s.slice();\n              next.splice(i, 1);\n              return next;\n            })\n          }\n          title=\"delete bitfield\"\n          aria-label=\"delete bitfield\"\n        >\n          ×\n        </button>\n      </div>\n\n      <hr />\n\n      <div style={{textAlign: 'right'}}>\n        dec (0 &ndash; {maxFieldValue}):{' '}\n        <Input\n          type=\"text\"\n          size={16}\n          style={{\n            textAlign: 'right',\n            margin: '2px 0',\n            fontFamily: 'monospace',\n          }}\n          value={fieldValue}\n          onChange={(e) => setFieldValueDec(parseInt(e.currentTarget.value))}\n        />\n        <br />\n        bin (0 &ndash; {dec2bin(maxFieldValue)}):{' '}\n        <Input\n          type=\"text\"\n          size={20}\n          style={{\n            textAlign: 'right',\n            margin: '2px 0',\n            fontFamily: 'monospace',\n          }}\n          value={dec2bin(fieldValue)}\n          onChange={(e) => setFieldValueDec(parseInt(e.currentTarget.value, 2))}\n        />\n        <br />\n        hex (0 &ndash; {dec2hex(maxFieldValue)}):{' '}\n        <Input\n          type=\"text\"\n          size={16}\n          style={{\n            textAlign: 'right',\n            margin: '2px 0',\n            fontFamily: 'monospace',\n          }}\n          value={dec2hex(fieldValue)}\n          onChange={(e) =>\n            setFieldValueDec(parseInt(e.currentTarget.value, 16))\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction Details({children, summary, name}) {\n  const [open, setOpen] = useLocalStorage(name, false);\n  return (\n    <details\n      open={open ? true : null}\n      style={{marginBottom: 16}}\n      onClick={(e) => {\n        e.preventDefault();\n      }}\n    >\n      <summary\n        style={{cursor: 'pointer'}}\n        onClick={(e) => {\n          setOpen((s) => !s);\n        }}\n      >\n        {summary}\n      </summary>\n      <div\n        style={{padding: '0 16px'}}\n        onClick={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        {children}\n      </div>\n    </details>\n  );\n}\n\nfunction Explorer() {\n  const [exampleKey, setExampleKey] = useQueryParam(\n    'exampleKey',\n    examples[0].title\n  );\n  const [newBitfieldSize, setNewBitfieldSize] = React.useState(4);\n  const [bitfields, setBitfields] = useLocalStorage('bitfields', []);\n  const [dataValue, setDataValue] = useLocalStorage('dataValue', 0);\n\n  function setDataValueSafe(newValue) {\n    setDataValue(clamp(newValue, 0, MAX32_BIT_VALUE));\n  }\n\n  const currentExample =\n    examples.find(({title}) => title == exampleKey) || examples[0];\n\n  React.useEffect(() => {\n    setBitfields(currentExample.bitfields);\n    setDataValueSafe(currentExample.value);\n  }, [currentExample]);\n\n  React.useEffect(() => {\n    console.log({bitfields, dataValue});\n  }, [bitfields]);\n\n  return (\n    <div>\n      <h1>bit packing explorer</h1>\n      <Intro />\n\n      <div style={{marginTop: 16}}>\n        <h3>example</h3>\n        <label>\n          <select\n            value={currentExample.title}\n            onChange={(e) => setExampleKey(e.currentTarget.value)}\n            style={{margin: '0 8px', fontSize: '1em'}}\n          >\n            {examples.map(({title}) => (\n              <option key={title} value={title}>\n                {title}\n              </option>\n            ))}\n          </select>\n        </label>\n        {currentExample.description && (\n          <div style={{margin: '0 16px'}}>\n            <small>{currentExample.description}</small>\n          </div>\n        )}\n      </div>\n      <div>\n        <h3>value to unpack</h3>\n        <div style={{padding: '0 16px'}}>\n          <div style={{display: 'flex'}}>\n            <label>\n              as decimal:\n              <Input\n                type=\"text\"\n                size={12}\n                value={dataValue}\n                onChange={(e) =>\n                  setDataValueSafe(parseInt(e.currentTarget.value, 10))\n                }\n                style={{flex: 1, margin: '0 8px', fontFamily: 'monospace'}}\n              />\n            </label>\n            <label>\n              as binary:\n              <Input\n                type=\"text\"\n                size={34}\n                value={dec2bin(dataValue)}\n                onChange={(e) =>\n                  setDataValueSafe(parseInt(e.currentTarget.value, 2))\n                }\n                style={{flex: 1, margin: '0 8px', fontFamily: 'monospace'}}\n              />\n            </label>\n            <label>\n              as hexadecimal:\n              <Input\n                type=\"text\"\n                size={9}\n                value={dec2hex(dataValue)}\n                onChange={(e) =>\n                  setDataValueSafe(parseInt(e.currentTarget.value, 16))\n                }\n                style={{flex: 1, margin: '0 8px', fontFamily: 'monospace'}}\n              />\n            </label>\n          </div>\n        </div>\n      </div>\n      <div>\n        <h3>bitfields</h3>\n      </div>\n      <div style={{display: 'flex', padding: '0 16px'}}>\n        {bitfields.map(({fieldSize, label}, i) => {\n          return (\n            <Bitfield\n              key={i}\n              {...{\n                bitfields,\n                setBitfields,\n                dataValue,\n                setDataValue: setDataValueSafe,\n                fieldSize,\n                label,\n                i,\n              }}\n            />\n          );\n        })}\n      </div>\n      <div style={{padding: 16}}>\n        <label>\n          {' '}\n          add field of size:\n          <Input\n            type=\"text\"\n            value={newBitfieldSize}\n            onChange={(e) => setNewBitfieldSize(e.currentTarget.value)}\n            style={{margin: '0 8px'}}\n          />\n          <button\n            onClick={() =>\n              setBitfields((s) =>\n                s.concat({\n                  fieldSize: clamp(parseInt(newBitfieldSize), 0, 32),\n                  label: '',\n                })\n              )\n            }\n          >\n            add\n          </button>\n        </label>\n      </div>\n      <Details\n        summary={<b>a note about endianness</b>}\n        name=\"a note about endianness\"\n      >\n        <p>\n          The 'value to unpack' is shown in{' '}\n          <a href=\"https://en.wikipedia.org/wiki/Endianness\">big endian</a>{' '}\n          order (largest byte to smallest byte), which reads more naturally to\n          humans (imo), but if you were to store the value in memory on a little\n          endian system and then access each byte separately by increasing\n          memory address, they would be in the reverse order. When dealing with\n          the whole packed value however (eg. as a 32-bit int), it doesn't\n          really matter.\n        </p>\n      </Details>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <ErrorBoundary>\n      <Explorer />\n    </ErrorBoundary>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}