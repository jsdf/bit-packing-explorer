(this["webpackJsonpbit-packing-explorer"]=this["webpackJsonpbit-packing-explorer"]||[]).push([[0],{15:function(e,t,i){},16:function(e,t,i){},17:function(e,t,i){"use strict";i.r(t);var n=i(0),a=i(3),r=i.n(a),s=i(5),l=i.n(s),o=(i(15),i(6)),c=i(7),d=i(9),h=i(8),u=i(2),b=i(1),f=i(3);function p(){return Object(n.jsxs)(n.Fragment,{children:[Object(n.jsxs)(z,{summary:Object(n.jsx)("b",{children:"what is bit packing?"}),name:"what is bit packing",children:[Object(n.jsxs)("p",{children:["Bit packing involves storing multiple values (called"," ",Object(n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Bit_field",children:"bit fields"}),") in as few bits as possible, 'packed' into a contiguous binary value. For example, storing a pixel's color and transparency in 32 bits using 8 bits for the red, green, blue and alpha channels."]}),Object(n.jsxs)("p",{children:["Bit packing has various usecases, such as to save memory, or to make the code run faster by packing pieces of data into a single value that the system's hardware can deal with natively (for example, a 32-bit integer on a system with a 32-bit"," ",Object(n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Word_(computer_architecture)",children:"word size"}),"). See also:"," ",Object(n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Bit_field",children:"bit fields"}),","," ",Object(n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Bit_manipulation",children:"bit manipulation"}),", ",Object(n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Binary_file",children:"binary files"}),","," ",Object(n.jsx)("a",{href:"https://www.kinematicsoup.com/news/2016/9/6/data-compression-bit-packing-101",children:"Data Compression: Bit-Packing 101"})]})]}),Object(n.jsxs)(z,{summary:Object(n.jsx)("b",{children:"how to use this tool"}),name:"how to use this tool",children:[Object(n.jsx)("p",{children:"Select an example from the dropdown, and try changing the 'value to unpack' (in as decimal, binary or hexadecimal form), and see how it affects the unpacked bit field values. Or do the reverse: edit the field values (dec/bin/hex) and see how it affects the packed value."}),Object(n.jsx)("p",{children:"Then you can create your own format. Select the 'custom' example, then create bitfields by entering the size (in bits) of the bitfield you want to create and clicking 'add', and enter a value to interpret using your defined fields."})]})]})}var j=[{title:"RGBA 8/8/8/8 pixel format: 32-bit color with alpha (purple, 50% opacity)",description:Object(n.jsxs)("p",{children:["A single color pixel value from a bitmap image, with 8 bits for each color channel and 8 bits for alpha, allowing for 16,777,216 distinct colors with 256 levels of transparency. This format is used in many pieces of software and games. For example, this format is used by the HTML Canvas API. The data value shown is 'rebeccapurple',"," ",Object(n.jsx)("span",{style:{display:"inline-block",width:10,height:10,backgroundColor:"rebeccapurple"}})," ","#663399, at 50% opacity. See also:"," ",Object(n.jsx)("a",{href:"https://www.fileformat.info/mirror/egff/ch09_02.htm",children:"Pixel Packing"})]}),value:1714657663,bitfields:[{label:"Red",fieldSize:8},{label:"Green",fieldSize:8},{label:"Blue",fieldSize:8},{label:"Alpha",fieldSize:8}]},{title:"Nintendo 64 RGBA 5/5/5/1 pixel format (blue, opaque)",description:Object(n.jsxs)("p",{children:["A single color pixel value from a bitmap image, with 5 bits for each color channel and 1 bit for alpha (eg. completely transparent or opaque). This format is used for the framebuffer image on the Nintendo 64. The data value shown is 'steelblue',"," ",Object(n.jsx)("span",{style:{display:"inline-block",width:10,height:10,backgroundColor:"steelblue"}})," ","#4682B4, at full opacity. See also:"," ",Object(n.jsx)("a",{href:"https://www.fileformat.info/mirror/egff/ch09_02.htm",children:"Pixel Packing"}),","," ",Object(n.jsx)("a",{href:"https://n64squid.com/homebrew/n64-sdk/textures/image-formats/",children:"Colour and image format types for the N64"})]}),value:214061,bitfields:[{label:"Red",fieldSize:5},{label:"Green",fieldSize:5},{label:"Blue",fieldSize:5},{label:"Alpha",fieldSize:1}]},{title:"DOOM Q16.16 fixed-point decimal number (\u03c0, 3.141592653589793)",value:205887,description:Object(n.jsxs)("span",{children:[Object(n.jsx)("p",{children:"This format stores a decimal number using 16 bits for the integer part and 16 bits for the fractional part (the stuff after the decimal point). The example given is \u03c0, 3.141592653589793. To convert this value back to a floating-point number, divide the fractional part by the maximum fractional value (for 16 bits: 65535) and add it to the integer part."}),Object(n.jsxs)("p",{children:[" ","This number format was"," ",Object(n.jsx)("a",{href:"https://doomwiki.org/wiki/Fixed_point",children:"used by DOOM"})," to take advantage of the fact that a fixed-point number representation can be operated on using integer CPU instructions, which at the time were considerably faster than floating-point instructions. See also:"," ",Object(n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Fixed-point_arithmetic",children:"Fixed-point arithmetic"})]})]}),bitfields:[{label:"Integer part",fieldSize:16},{label:"Fractional part",fieldSize:16}]},{title:"MS-DOS 32-bit Date & Time (2020-4-29 11:48:32AM)",description:Object(n.jsxs)("p",{children:["This is the original format in which MS-DOS stored file creation time and date, as well as the system clock format for IBM PC BIOSes. It has a resolution of 2 seconds; the 5 bits allocated to storing seconds is insufficient to store 60 distinct values, so it stores seconds divided by 2. As it stores the year as an offset from 1980 with a range of 0 \u2013 127, values in this format will overflow in the year 2107. See also:"," ",Object(n.jsx)("a",{href:"https://docs.microsoft.com/en-us/cpp/c-runtime-library/32-bit-windows-time-date-formats",children:"32-Bit Windows Time/Date Formats"})]}),value:1350327824,bitfields:[{label:"Year (since 1980)",fieldSize:7},{label:"Month (0 - 11)",fieldSize:4},{label:"Day of Month (0 - 30)",fieldSize:5},{label:"Hour (0 - 23)",fieldSize:5},{label:"Minute (0 - 59)",fieldSize:6},{label:"Second / 2 (0 - 29)",fieldSize:5}]},{title:"MIDI Message (Note On C3 at 50% velocity)",value:9452607,description:Object(n.jsxs)("span",{children:[Object(n.jsxs)("p",{children:["In the MIDI protocol, notes are played using"," ",Object(n.jsx)("a",{href:"https://www.songstuff.com/recording/article/midi_message_format/",children:"MIDI Messages"})," ","like 'Note On' and 'Note Off'. MIDI commands consist of up to 3 bytes: a 'status byte' followed by up to 2 'data bytes'. Status bytes begin with 1 and data bytes begin with 0. A status byte then contains a 3 bit 'message' value, basically a command, like 'note on' or 'program change', and then the MIDI channel number to send the command to (0 \u2013 15)."]}),Object(n.jsx)("img",{width:600,src:"https://cdn.glitch.com/3d521f4c-3f74-44c5-b7b8-ef308d517c51%2FScreen%20Shot%202020-04-30%20at%209.08.50%20PM.png?v=1588295353615"}),Object(n.jsx)("p",{children:"In the example we have a 'Note On' message on channel 0, playing note number 60 (C3, or 'middle C') with a velocity of 63 (50% of maximum)."})]}),bitfields:[{fieldSize:1,label:"is status byte"},{fieldSize:3,label:"status message"},{fieldSize:4,label:"channel"},{fieldSize:1,label:"is status byte"},{fieldSize:7,label:"data 1 (note number)"},{fieldSize:1,label:"is status byte"},{fieldSize:7,label:"data 2 (velocity)"}]},{title:"custom (make your own!)",value:0,bitfields:[]}];function m(e){return e.toString(2)}function x(e){return e.toString(16).toUpperCase()}function g(e,t){var i="5::::"+e,n=f.useState((function(){try{var e=window.localStorage.getItem(i);return e?JSON.parse(e):t}catch(n){return console.log(n),t}})),a=Object(b.a)(n,2),r=a[0],s=a[1];return[r,function(e){try{var t=e instanceof Function?e(r):e;s(t),window.localStorage.setItem(i,JSON.stringify(t))}catch(n){console.log(n)}}]}var O=Math.pow(2,32)-1;function y(e){return Object(n.jsx)("input",Object(u.a)({onClick:function(e){return e.currentTarget.select()},size:10},e))}function v(e,t,i){return Math.min(i,Math.max(t,e))}function w(e,t){if(e<0)throw new Error("unsafe input to shiftLeft");return e*Math.pow(2,t)}var S=function(e){Object(d.a)(i,e);var t=Object(h.a)(i);function i(e){var n;return Object(o.a)(this,i),(n=t.call(this,e)).state={error:null,errorInfo:null},n}return Object(c.a)(i,[{key:"componentDidCatch",value:function(e,t){this.setState({error:e,errorInfo:t}),console.log({error:e,errorInfo:t}),localStorage.clear()}},{key:"render",value:function(){return this.state.errorInfo?Object(n.jsxs)("div",{children:[Object(n.jsx)("h2",{children:"Something went wrong."}),Object(n.jsxs)("details",{style:{whiteSpace:"pre-wrap"},children:[this.state.error&&this.state.error.toString(),Object(n.jsx)("br",{}),this.state.errorInfo.componentStack]})]}):this.props.children}}]),i}(f.Component);function k(e){var t=e.bitfields,i=e.setBitfields,a=e.dataValue,r=e.setDataValue,s=e.fieldSize,l=e.label,o=e.i,c=Math.pow(2,s)-1,d=t.slice(o+1).map((function(e){return e.fieldSize})).reduce((function(e,t){return e+t}),0),h=function(e,t){if(e>O||t>O)throw new Error("unsafe input to bitwiseAnd");return e&t}(function(e,t){if(e<0)throw new Error("unsafe input to shiftRight");return Math.floor(e/Math.pow(2,t))}(a,d),c);function b(e){r(a-w(h,d)+w(v(isNaN(e)?0:e,0,c),d))}return Object(n.jsxs)("div",{style:{flex:1,border:"solid 1px black",padding:4,fontSize:12,maxWidth:400},children:[Object(n.jsxs)("div",{style:{display:"flex"},children:[Object(n.jsx)("div",{style:{flex:1,margin:"2px 0"},children:Object(n.jsxs)("div",{children:[Object(n.jsxs)("label",{children:[Object(n.jsx)(y,{type:"text",value:l,placeholder:"field name",style:{margin:"2px 0"},size:20,onChange:function(e){return i((function(t){var i=t.slice();return i[o]=Object(u.a)(Object(u.a)({},i[o]),{},{label:e.currentTarget.value}),i}))}})," ",Object(n.jsx)("br",{}),"size:"," ",Object(n.jsx)(y,{value:s,onChange:function(e){return i((function(t){var i=t.slice();return i[o]=Object(u.a)(Object(u.a)({},i[o]),{},{fieldSize:v(parseInt(e.currentTarget.value),0,32)}),i}))}})]})," ",Object(n.jsx)("br",{}),"bits: ",s+d-1,s>1?Object(n.jsxs)("span",{children:[" \u2013 ",d]}):""]})}),Object(n.jsx)("button",{style:{height:"2em"},onClick:function(){return i((function(e){var t=e.slice();return t.splice(o,1),t}))},title:"delete bitfield","aria-label":"delete bitfield",children:"\xd7"})]}),Object(n.jsx)("hr",{}),Object(n.jsxs)("div",{style:{textAlign:"right"},children:["dec (0 \u2013 ",c,"):"," ",Object(n.jsx)(y,{type:"text",size:16,style:{textAlign:"right",margin:"2px 0",fontFamily:"monospace"},value:h,onChange:function(e){return b(parseInt(e.currentTarget.value))}}),Object(n.jsx)("br",{}),"bin (0 \u2013 ",m(c),"):"," ",Object(n.jsx)(y,{type:"text",size:20,style:{textAlign:"right",margin:"2px 0",fontFamily:"monospace"},value:m(h),onChange:function(e){return b(parseInt(e.currentTarget.value,2))}}),Object(n.jsx)("br",{}),"hex (0 \u2013 ",x(c),"):"," ",Object(n.jsx)(y,{type:"text",size:16,style:{textAlign:"right",margin:"2px 0",fontFamily:"monospace"},value:x(h),onChange:function(e){return b(parseInt(e.currentTarget.value,16))}})]})]})}function z(e){var t=e.children,i=e.summary,a=g(e.name,!1),r=Object(b.a)(a,2),s=r[0],l=r[1];return Object(n.jsxs)("details",{open:!!s||null,style:{marginBottom:16},onClick:function(e){e.preventDefault()},children:[Object(n.jsx)("summary",{style:{cursor:"pointer"},onClick:function(e){l((function(e){return!e}))},children:i}),Object(n.jsx)("div",{style:{padding:"0 16px"},onClick:function(e){e.stopPropagation()},children:t})]})}function I(){var e=function(e,t){var i=f.useState((function(){try{var i=new URL(window.location.href).searchParams.get(e);return null!=i?JSON.parse(i):t}catch(n){return console.log(n),t}})),n=Object(b.a)(i,2),a=n[0],r=n[1];return[a,function(t){try{var i="function"===typeof t?t(a):t;r(i);var n=new URL(window.location.href);n.searchParams.set(e,JSON.stringify(i)),window.history.replaceState(null,null,n.toString())}catch(s){console.log(s)}}]}("exampleKey",j[0].title),t=Object(b.a)(e,2),i=t[0],a=t[1],r=f.useState(4),s=Object(b.a)(r,2),l=s[0],o=s[1],c=g("bitfields",[]),d=Object(b.a)(c,2),h=d[0],w=d[1],S=g("dataValue",0),I=Object(b.a)(S,2),C=I[0],T=I[1];function M(e){T(v(e,0,O))}var B=j.find((function(e){return e.title==i}))||j[0];return f.useEffect((function(){w(B.bitfields),M(B.value)}),[B]),f.useEffect((function(){console.log({bitfields:h,dataValue:C})}),[h]),Object(n.jsxs)("div",{children:[Object(n.jsx)("h1",{children:"bit packing explorer"}),Object(n.jsx)(p,{}),Object(n.jsxs)("div",{style:{marginTop:16},children:[Object(n.jsx)("h3",{children:"example"}),Object(n.jsx)("label",{children:Object(n.jsx)("select",{value:B.title,onChange:function(e){return a(e.currentTarget.value)},style:{margin:"0 8px",fontSize:"1em"},children:j.map((function(e){var t=e.title;return Object(n.jsx)("option",{value:t,children:t},t)}))})}),B.description&&Object(n.jsx)("div",{style:{margin:"0 16px"},children:Object(n.jsx)("small",{children:B.description})})]}),Object(n.jsxs)("div",{children:[Object(n.jsx)("h3",{children:"value to unpack"}),Object(n.jsx)("div",{style:{padding:"0 16px"},children:Object(n.jsxs)("div",{style:{display:"flex"},children:[Object(n.jsxs)("label",{children:["as decimal:",Object(n.jsx)(y,{type:"text",size:12,value:C,onChange:function(e){return M(parseInt(e.currentTarget.value,10))},style:{flex:1,margin:"0 8px",fontFamily:"monospace"}})]}),Object(n.jsxs)("label",{children:["as binary:",Object(n.jsx)(y,{type:"text",size:34,value:m(C),onChange:function(e){return M(parseInt(e.currentTarget.value,2))},style:{flex:1,margin:"0 8px",fontFamily:"monospace"}})]}),Object(n.jsxs)("label",{children:["as hexadecimal:",Object(n.jsx)(y,{type:"text",size:9,value:x(C),onChange:function(e){return M(parseInt(e.currentTarget.value,16))},style:{flex:1,margin:"0 8px",fontFamily:"monospace"}})]})]})})]}),Object(n.jsx)("div",{children:Object(n.jsx)("h3",{children:"bitfields"})}),Object(n.jsx)("div",{style:{display:"flex",padding:"0 16px"},children:h.map((function(e,t){var i=e.fieldSize,a=e.label;return Object(n.jsx)(k,Object(u.a)({},{bitfields:h,setBitfields:w,dataValue:C,setDataValue:M,fieldSize:i,label:a,i:t}),t)}))}),Object(n.jsx)("div",{style:{padding:16},children:Object(n.jsxs)("label",{children:[" ","add field of size:",Object(n.jsx)(y,{type:"text",value:l,onChange:function(e){return o(e.currentTarget.value)},style:{margin:"0 8px"}}),Object(n.jsx)("button",{onClick:function(){return w((function(e){return e.concat({fieldSize:v(parseInt(l),0,32),label:""})}))},children:"add"})]})}),Object(n.jsx)(z,{summary:Object(n.jsx)("b",{children:"a note about endianness"}),name:"a note about endianness",children:Object(n.jsxs)("p",{children:["The 'value to unpack' is shown in"," ",Object(n.jsx)("a",{href:"https://en.wikipedia.org/wiki/Endianness",children:"big endian"})," ","order (largest byte to smallest byte), which reads more naturally to humans (imo), but if you were to store the value in memory on a little endian system and then access each byte separately by increasing memory address, they would be in the reverse order. When dealing with the whole packed value however (eg. as a 32-bit int), it doesn't really matter."]})})]})}function C(){return Object(n.jsx)(S,{children:Object(n.jsx)(I,{})})}i(16);var T=function(e){e&&e instanceof Function&&i.e(3).then(i.bind(null,18)).then((function(t){var i=t.getCLS,n=t.getFID,a=t.getFCP,r=t.getLCP,s=t.getTTFB;i(e),n(e),a(e),r(e),s(e)}))};l.a.render(Object(n.jsx)(r.a.StrictMode,{children:Object(n.jsx)(C,{})}),document.getElementById("root")),T()}},[[17,1,2]]]);
//# sourceMappingURL=main.237469a8.chunk.js.map